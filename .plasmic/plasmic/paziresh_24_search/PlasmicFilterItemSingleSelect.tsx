// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sMdpLWyxbzDCruwMRffW2m
// Component: AK8GMS7oZ_Fh

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdRadio } from "@plasmicpkgs/antd5/skinny/registerRadio";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sMdpLWyxbzDCruwMRffW2m/projectcss
import sty from "./PlasmicFilterItemSingleSelect.module.css"; // plasmic-import: AK8GMS7oZ_Fh/css

createPlasmicElementProxy;

export type PlasmicFilterItemSingleSelect__VariantMembers = {};
export type PlasmicFilterItemSingleSelect__VariantsArgs = {};
type VariantPropType = keyof PlasmicFilterItemSingleSelect__VariantsArgs;
export const PlasmicFilterItemSingleSelect__VariantProps =
  new Array<VariantPropType>();

export type PlasmicFilterItemSingleSelect__ArgsType = {
  label?: string;
  options?: any;
};
type ArgPropType = keyof PlasmicFilterItemSingleSelect__ArgsType;
export const PlasmicFilterItemSingleSelect__ArgProps = new Array<ArgPropType>(
  "label",
  "options"
);

export type PlasmicFilterItemSingleSelect__OverridesType = {
  root?: Flex__<"div">;
  radioGroup?: Flex__<typeof AntdRadioGroup>;
  radio?: Flex__<typeof AntdRadio>;
};

export interface DefaultFilterItemSingleSelectProps {
  label?: string;
  options?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFilterItemSingleSelect__RenderFunc(props: {
  variants: PlasmicFilterItemSingleSelect__VariantsArgs;
  args: PlasmicFilterItemSingleSelect__ArgsType;
  overrides: PlasmicFilterItemSingleSelect__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "radioGroup.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__shEly
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.label;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <AntdRadioGroup
        data-plasmic-name={"radioGroup"}
        data-plasmic-override={overrides.radioGroup}
        className={classNames("__wab_instance", sty.radioGroup)}
        onChange={generateStateOnChangeProp($state, ["radioGroup", "value"])}
        optionType={"button"}
        options={(() => {
          const __composite = [
            { value: "option1", label: null },
            { value: "option2", label: "Option 2" }
          ];
          __composite["0"]["label"] = "Option 1ww";
          return __composite;
        })()}
        useChildren={true}
        value={generateStateValueProp($state, ["radioGroup", "value"])}
      >
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $props.options;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <AntdRadio
              data-plasmic-name={"radio"}
              data-plasmic-override={overrides.radio}
              autoFocus={false}
              className={classNames("__wab_instance", sty.radio)}
              key={currentIndex}
              value={(() => {
                try {
                  return currentItem.name;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zmbox
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return currentItem.label;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Option 1";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </AntdRadio>
          );
        })}
      </AntdRadioGroup>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "radioGroup", "radio"],
  radioGroup: ["radioGroup", "radio"],
  radio: ["radio"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  radioGroup: typeof AntdRadioGroup;
  radio: typeof AntdRadio;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFilterItemSingleSelect__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFilterItemSingleSelect__VariantsArgs;
    args?: PlasmicFilterItemSingleSelect__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFilterItemSingleSelect__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFilterItemSingleSelect__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFilterItemSingleSelect__ArgProps,
          internalVariantPropNames: PlasmicFilterItemSingleSelect__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFilterItemSingleSelect__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFilterItemSingleSelect";
  } else {
    func.displayName = `PlasmicFilterItemSingleSelect.${nodeName}`;
  }
  return func;
}

export const PlasmicFilterItemSingleSelect = Object.assign(
  // Top-level PlasmicFilterItemSingleSelect renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    radioGroup: makeNodeComponent("radioGroup"),
    radio: makeNodeComponent("radio"),

    // Metadata about props expected for PlasmicFilterItemSingleSelect
    internalVariantProps: PlasmicFilterItemSingleSelect__VariantProps,
    internalArgProps: PlasmicFilterItemSingleSelect__ArgProps
  }
);

export default PlasmicFilterItemSingleSelect;
/* prettier-ignore-end */
